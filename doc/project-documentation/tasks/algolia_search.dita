<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task id="algolia_search">
    <title>Algolia Search</title>
    <shortdesc>For our custom search service in WebHelp we used Algolia and its API.</shortdesc>
    <taskbody>
        <context>
            <p>How to connect <b>HTML Crawler</b> with <b>Algolia</b> and use it in
                <b>WebHelp</b>.</p>
        </context>
        <steps>
            <step>
                <cmd>Create an <b>Algolia</b> account by accesing: <xref
                        href="https://www.algolia.com" format="html" scope="external"/></cmd>
            </step>
            <step>
                <cmd>Go to Settings and search for <b>Application ID</b>, <b>Admin API Key</b> and
                        <b>Search-Only API key</b>. Save Application ID and Admin API Key to
                        "<b>config.properties</b>" file in repository. We'll need the Seach-Only API
                    key later.</cmd>
            </step>
            <step>
                <cmd>To create a new Index with crawled pages we use <b>AlgoliaClient</b> class and
                    here's how to do it:</cmd>
                <info>
                    <codeblock id="codeblock_cmx_1yh_35b">AlgoliaClient client = new AlgoliaClient();
client.initIndex(indexName);
client.addObjectToIndex(url, baseUrl);</codeblock>
                </info>
            </step>
            <step>
                <cmd>We don't need to create a Crawler because AlgoliaClient uses its internal
                    intstance of Crawler. We just need to send URL and baseURL into
                    addObjectToIndex(url, baseUrl) method. The method will call the Crawler to crawl
                    the sent URL and will post crawled pages into indexName on Algolia.</cmd>
            </step>
            <step>
                <cmd>After adding objects to our index we can use with Algolia search engine. Access
                    your template folder for WebHelp Responsive. Create a new "search.html" file
                    where we will connect our Algolia JS dependecies. It should look like
                    this:</cmd>
                <info>
                    <codeblock id="codeblock_z1d_vyh_35b">&lt;!DOCTYPE html>
&lt;html>
    &lt;head>
        &lt;script src="https://cdn.jsdelivr.net/npm/algoliasearch@4.5.1/dist/algoliasearch-lite.umd.js"
		integrity="sha256-EXPXz4W6pQgfYY3yTpnDa3OH8/EPn16ciVsPQ/ypsjk=" crossorigin="anonymous">&lt;/script>
        &lt;script src="https://cdn.jsdelivr.net/npm/instantsearch.js@4.8.3/dist/instantsearch.production.min.js"
		integrity="sha256-LAGhRRdtVoD6RLo2qDQsU2mp+XVSciKRC8XPOBWmofM=" crossorigin="anonymous">&lt;/script>
        &lt;script src="${oxygen-webhelp-template-dir}/js/algolia.js">&lt;/script>
    &lt;/head>
    &lt;body>&lt;/body>
&lt;/html></codeblock>
                </info>
            </step>
            <step>
                <cmd>Create "algolia.js" file in the same directory. We'll use it to replace search
                    engine. In order to connect this HTML file with JS source files we have to add
                    these lines to our template:</cmd>
                <info>
                    <codeblock id="codeblock_bjv_zyh_35b"> &lt;resources>
            &lt;fileset>&lt;include name="algolia.js"/>&lt;/fileset>
 &lt;/resources>
 &lt;html-fragments>
            &lt;fragment file="search.html" placeholder="webhelp.fragment.head"/>
 &lt;/html-fragments></codeblock>
                </info>
            </step>
            <step>
                <cmd>In algolia.js we have to disable current search engine and change it to our
                    Algolia engine.</cmd>
                <info>
                    <codeblock id="codeblock_vg5_fzh_35b">// Connect and authenticate with your Algolia app
const searchClient = algoliasearch('your_app_id', 'your_search_only_api_key');
const searchInstance = instantsearch({
	indexName: your_index_name,
	searchClient,
	routing: true,
})

const algoliaSearch = {
    performSearchOperation(query, successHandler, errorHandler){
        const result = searchClient.initIndex(searchInstance.indexName).search(query);
        result.then(obj => {
            const meta = new WebHelpAPI.SearchMeta('Algolia', obj.nbHits, obj.page, obj.hitsPerPage, obj.nbPages, query, false, false, false, false, false, false);
            
            const documents = obj.hits.map(it => {
                return new WebHelpAPI.SearchDocument(it.objectID, it.title, "", [], 0, [], []);
            });

            successHandler(new WebHelpAPI.SearchResult(meta, documents));
        }).catch(error => {
            console.log(error);
        }) 
    },

    onPageChangedHandler(pageToShow, query, successHandler, searchFailed){
       const result = searchClient.initIndex(searchInstance.indexName).search(query, {
        page: pageToShow,
      });

      result.then(obj => {
        const meta = new WebHelpAPI.SearchMeta('Algolia', obj.nbHits, obj.page, obj.hitsPerPage, obj.nbPages, query, false, false, false, false, false, false);
        
        const documents = obj.hits.map(it => {
            return new WebHelpAPI.SearchDocument(it.objectID, it.title, "", [], 0, [], []);
        });

        successHandler(new WebHelpAPI.SearchResult(meta, documents));
    }).catch(error => {
        console.log(error);
    }) 
    }
}

WebHelpAPI.disableWebHelpDefaultSearchEngine();
WebHelpAPI.setCustomSearchEngine(algoliaSearch);</codeblock>
                </info>
            </step>
        </steps>
    </taskbody>
</task>
