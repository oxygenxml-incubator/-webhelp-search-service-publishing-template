<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task id="react-page-algolia-autocomplete">
    <title>How to integrate Algolia autocomplete with React?</title>
    <shortdesc> How to integrate Algolia autocomplete in a React search page?</shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <keyword outputclass="label">Algolia</keyword>
                <keyword outputclass="label">React</keyword>
            </keywords>
        </metadata>
    </prolog>
    <taskbody>
        <steps>
            <step>
                <cmd>First of all, let's restructure directories and files. In /src/components
                    create /autocomplete /buttons /hits directories</cmd>
            </step>
            <step>
                <cmd>Create new components and delete components from the previous task</cmd>
                <info>
                    <codeblock id="codeblock_fbp_qzn_p5b">|-- src/components
    |-- autocomplete
        |-- AutocompleteComponent.jsx
        |-- AutocompleteItem.jsx
        |-- AutocompleteList.jsx
    |-- buttons
        |-- ClearButton.jsx
        |-- SubmitButton.jsx
    |-- hits
        |-- HitsItem.jsx
        |-- HitsList.jsx
        |-- ResultsContainer.jsx
        |-- SearchInformation.jsx</codeblock>
                </info>
            </step>
            <step>
                <cmd>Also install Algolia autocomplete dependencies</cmd>
                <info>
                    <codeblock id="codeblock_hxj_m14_p5b">npm install @algolia/autocomplete-core @algolia/autocomplete-preset-algolia @algolia/autocomplete-theme-classic react-instantsearch-hooks-web @algolia/autocomplete-theme-classic</codeblock>
                </info>
            </step>
            <step>
                <cmd>Edit your .css file</cmd>
                <info>
                    <codeblock id="codeblock_srm_t14_p5b">body {
  margin: 0;

  font-family: "Play", sans-serif;
}

/* Search Section */

.search-field {
  display: flex;
  justify-content: center;

  width: 100%;
  height: 100px;
}

.search-input {
  margin-top: auto;

  padding-left: 10px;
  padding-right: 10px;

  width: 40%;
  height: 30px;

  border: 1px solid gray;
  border-radius: 15px;

  font-size: 16px;
}

.search-button {
  margin-top: auto;
  margin-bottom: 5px;

  padding-left: 5px;

  height: 25px;
  width: 25px;

  border: none;
  background-color: white;
}

.search-icon {
  color: gray;
  height: 25px;
}

.search-icon:hover {
  color: black;
  cursor: pointer;
}

.error-message {
  display: block;

  min-height: 75px;
  width: 100%;

  text-align: center;

  color: red;

}

/* Information Section */

.information-container {
  display: flex;

  margin-left: 25px;
  margin-right: 25px;

  border-bottom: 1px solid rgba(0, 0, 0, 0.1);
}

.hits-information {
  width: 50%;
}

.page-information {
  width: 50%;

  text-align: right;
}

/* Results section */

.row {
  margin-left: 50px;
  margin-right: 50px;

  display: block;
}

.hits {
  list-style: none;

  padding: 0;
}

.hits-item {
  padding-top: 25px;
}

.title {
  text-decoration: none;
  line-height: 20px;
  letter-spacing: 2px;
  color: cadetblue;
  font-size: 18px;

  display: block;
}

.description {
  font-size: 16px;

  display: block;
}

.no-results {
  width: 50%;

  text-align: center;
  color: cadetblue;
  font-size: 30px;

  margin: 0 auto;
}

/* Page selection */

.page-selection {
  width: 100%;
  margin-top: 50px;

  display: flex;
  justify-content: center;
}

.page-selector {
  background-color: #e1ecf4;
  border-radius: 3px;
  border: 1px solid #7aa7c7;
  box-shadow: rgba(255, 255, 255, 0.7) 0 1px 0 0 inset;
  box-sizing: border-box;
  color: cadetblue;
  cursor: pointer;
  font-size: 13px;
  line-height: 1.15385;
  outline: none;
  padding: 8px 0.8em;
  text-align: center;
  touch-action: manipulation;
  vertical-align: baseline;
}

.page-selector:hover {
  background-color: #b3d3ea;
  color: #2c5777;
}

.page-selector-disabled {
  color: gray;
  cursor: default;
}

.page-selector-disabled:hover {
  background-color: #e1ecf4;
  color: gray;
}

/* Loader */

.loader {
  display: flex;
  justify-content: center;
}</codeblock>
                </info>
            </step>
            <step>
                <cmd>ClearButton.jsx</cmd>
                <info>
                    <codeblock id="codeblock_m3q_h14_p5b">import React from 'react';

const ClearButton = () => {
    return (&lt;button className="aa-ClearButton" title="Clear" type="reset">&lt;svg
        width="20"
        height="20"
        viewBox="0 0 20 20"
        fill="currentColor"
    >
        &lt;path
            d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
            fillRule="evenodd"
            clipRule="evenodd"
        />
    &lt;/svg>&lt;/button>);
}

export default ClearButton;</codeblock>
                </info>
            </step>
            <step>
                <cmd>SubmitButton.jsx</cmd>
                <info>
                    <codeblock id="codeblock_m5h_314_p5b">import React from 'react';

const SubmitButton = () => {
    return (&lt;button className="aa-SubmitButton" type="submit" title="Submit">
        &lt;svg width="20" height="20" viewBox="0 0 20 20">
            &lt;path
                d="M14.386 14.386l4.0877 4.0877-4.0877-4.0877c-2.9418 2.9419-7.7115 2.9419-10.6533 0-2.9419-2.9418-2.9419-7.7115 0-10.6533 2.9418-2.9419 7.7115-2.9419 10.6533 0 2.9419 2.9418 2.9419 7.7115 0 10.6533z"
                fill="none"
                fillRule="evenodd"
                stroke="currentColor"
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="1.4"
            />
        &lt;/svg>
    &lt;/button>);
}

export default SubmitButton;</codeblock>
                </info>
            </step>
            <step>
                <cmd>AutocompleteComponent.jsx</cmd>
                <info>
                    <codeblock id="codeblock_ipp_j14_p5b">import { createAutocomplete } from '@algolia/autocomplete-core';
import { getAlgoliaResults } from '@algolia/autocomplete-preset-algolia';

import React, { useState, useMemo, useEffect, useRef } from 'react';

import AutocompleteList from './AutocompleteList.jsx';

import ClearButton from '.././buttons/ClearButton.jsx';
import SubmitButton from ".././buttons/SubmitButton.jsx"

import '@algolia/autocomplete-theme-classic';

const AutocompleteComponent = (props) => {
    const [errorMessage, setErrorMessage] = useState("");

    const [autocompleteState, setAutocompleteState] = useState({
        collections: [],
        completion: null,
        context: {},
        isOpen: false,
        query: '',
        activeItemId: null,
        status: 'idle',
    });

    const autocomplete = useMemo(() => createAutocomplete({
        onSubmit({ state }) {
            if (state.query.trim().length !== 0)
                props.performSearch(state.query, 0)
            else
                setErrorMessage("Please fill in the empty fields!")
        },

        onStateChange({ state }) {
            if (state.query.trim().localeCompare(""))
                setErrorMessage("")

            setAutocompleteState(state);
        },

        navigator: {
            navigate({ item }) {
                props.performSearch(item.title, 0)
            },
        },

        getSources() {
            return [
                {
                    sourceId: 'documents',

                    getItemUrl({ item }) {
                        return item.objectID;
                    },

                    getItems({ query }) {
                        return getAlgoliaResults({
                            searchClient: props.searchClient,
                            queries: [
                                {
                                    indexName: "webhelp-search-service-publishing-template",
                                    query,
                                    params: {
                                        hitsPerPage: 5,
                                        highlightPreTag: '&lt;mark>',
                                        highlightPostTag: '&lt;/mark>'
                                    },
                                },
                            ],
                        });
                    },
                },
            ];
        }
    }, props), [props]);

    const inputRef = useRef(null);
    const formRef = useRef(null);
    const panelRef = useRef(null);
    const { getEnvironmentProps } = autocomplete;

    useEffect(() => {
        if (!formRef.current || !panelRef.current || !inputRef.current) {
            return undefined;
        }
        const { onTouchStart, onTouchMove } = getEnvironmentProps({
            formElement: formRef.current,
            inputElement: inputRef.current,
            panelElement: panelRef.current,
        });

        window.addEventListener('touchstart', onTouchStart);
        window.addEventListener('touchmove', onTouchMove);

        return () => {
            window.removeEventListener('touchstart', onTouchStart);
            window.removeEventListener('touchmove', onTouchMove);
        };

    }, [getEnvironmentProps, formRef, inputRef, panelRef]);

    return (
        &lt;div className="aa-Autocomplete" {...autocomplete.getRootProps({})}>
            &lt;form
                ref={formRef}
                className="aa-Form"
                {...autocomplete.getFormProps({ inputElement: inputRef.current })}
            >
                &lt;div className="aa-InputWrapperPrefix">
                    &lt;label className="aa-Label" {...autocomplete.getLabelProps({})}>
                        &lt;SubmitButton />
                    &lt;/label>
                &lt;/div>
                &lt;div className="aa-InputWrapper">
                    &lt;input
                        className="aa-Input"
                        ref={inputRef}
                        {...autocomplete.getInputProps({ inputElement: inputRef.current })}
                    />
                &lt;/div>
                &lt;div className="aa-InputWrapperSuffix">
                    &lt;ClearButton />
                &lt;/div>
            &lt;/form>

            {autocompleteState.isOpen &amp;&amp; (
                &lt;div
                    ref={panelRef}
                    className={[
                        'aa-Panel',
                        'aa-Panel--desktop',
                        autocompleteState.status === 'stalled' &amp;&amp; 'aa-Panel--stalled',
                    ]
                        .filter(Boolean)
                        .join(' ')}
                    {...autocomplete.getPanelProps({})}
                >
                    &lt;div className="aa-PanelLayout aa-Panel--scrollable">
                        {autocompleteState.collections.map((collection, index) => {
                            return (
                                &lt;AutocompleteList key={`source-${index}`} performSearch={props.performSearch} index={index} items={collection.items} source={collection.source} autocomplete={autocomplete} />
                            );
                        })}
                    &lt;/div>
                &lt;/div>
            )}
            &lt;span className="error-message">{errorMessage}&lt;/span>
        &lt;/div>
    );
}

export default AutocompleteComponent;
</codeblock>
                </info>
            </step>
            <step>
                <cmd>AutocompleteItem.jsx</cmd>
                <info>
                    <codeblock id="codeblock_cm2_k14_p5b">import React from 'react';

import { Highlight } from 'react-instantsearch-hooks-web';

const AutocompleteItem = ({ performSearch, item, source, autocomplete }) => {
    return (
        &lt;li
            key={item.objectID}
            className="aa-Item"
            {...autocomplete.getItemProps({ item, source })}
            onClick={() => { performSearch(item.title, 0), autocomplete.setIsOpen(false) }}
        >
            &lt;div className="aa-ItemWrapper">
                &lt;div className="aa-ItemContent">
                    &lt;div className="aa-ItemContentBody">
                        &lt;div className="aa-ItemContentTitle">
                            &lt;Highlight hit={item} attribute="title" />;
                        &lt;/div>
                        &lt;div className="aa-ItemContentDescription">
                            &lt;Highlight hit={item} attribute="shortDescription" />;
                        &lt;/div>
                    &lt;/div>
                &lt;/div>
            &lt;/div>
        &lt;/li>
    );
}

export default AutocompleteItem;</codeblock>
                </info>
            </step>
            <step>
                <cmd>AutocompleteList.jsx</cmd>
                <info>
                    <codeblock id="codeblock_h3y_k14_p5b">import React from 'react';

import AutoCompleteItem from "./AutocompleteItem.jsx";

const AutocompleteList = ({ performSearch, index, autocomplete, items, source }) => {
    return (&lt;section key={`source-${index}`} className="aa-Source">
        {items.length > 0 &amp;&amp; (
            &lt;ul className="aa-List" {...autocomplete.getListProps()}>
                {items.map((item) => {
                    return (&lt;AutoCompleteItem key={item.objectID} performSearch={performSearch} item={item} source={source} autocomplete={autocomplete} />)
                })}
            &lt;/ul>
        )}
    &lt;/section>);
}

export default AutocompleteList;</codeblock>
                </info>
            </step>
            <step>
                <cmd>To run the React project use:</cmd>
                <info>
                    <codeblock id="codeblock_vwd_jvn_p5b">npm run build //To build an output for production
npm run dev //To run development mode</codeblock>
                </info>
            </step>
        </steps>
    </taskbody>
</task>
